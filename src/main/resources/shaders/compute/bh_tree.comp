// Binary radix tree build and helpers

uint longestCommonPrefix(uint64_t a, uint64_t b)
{
    if (a == b) return 64u;
    uint64_t x = a ^ b;
    uint highBits = uint(x >> 32);
    uint lowBits = uint(x);
    if (highBits != 0u) {
        return 31u - findMSB(uint(highBits));
    } else {
        return 63u - findMSB(uint(lowBits));
    }
}

int safeLCP(int i, int j)
{
    if (i < 0 || j < 0 || i >= int(sim.numBodies) || j >= int(sim.numBodies)) return -1;
    
    uint64_t mortonI = mortonIn[i];
    uint64_t mortonJ = mortonIn[j];

    if (mortonI == mortonJ) {
        uint iu = uint(i);
        uint ju = uint(j);
        if (iu == ju) {
            return 64;
        } else {
            return 64 + (31 - findMSB(iu ^ ju));
        }
    }
    return int(longestCommonPrefix(mortonI, mortonJ));
}
//Builds the binary radix tree by creating internal nodes
//Also assigns parents to leaves
void treeBuildBinaryRadixTreeKernel()
{
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= sim.numBodies - 1u) {
        // For when there is only one body
        if (gid == 0) {
            internalNodes[0].parentId = 0xFFFFFFFFu;
            internalNodes[0].childA = 0;
            internalNodes[0].childB = 0xFFFFFFFFu;
            internalNodes[0].readyChildren = 1u;
            internalNodes[0].comMass = vec4(0.0);
            internalNodes[0].aabb = packAABB(AABB(vec3(1e38), vec3(-1e38)));
            internalNodes[0].nodeDepth = 0u;
            internalNodes[0].bodiesContained = 0u;
            leafNodes[0].parentId = sim.initialNumBodies;

        }
        return;
    }


    const int i = int(gid);

    int lcpRight = safeLCP(i, i + 1);
    int lcpLeft = safeLCP(i, i - 1);
    int direction = (lcpLeft > lcpRight) ? -1 : 1;

    int deltaMin = safeLCP(i, i - direction);
    int lmax = 2;
    while (safeLCP(i, i + direction * lmax) > deltaMin) {
        lmax *= 2;
    }

    int l = 0;
    int t = lmax / 2;
    while (t > 0) {
        if (safeLCP(i, i + direction * (l + t)) > deltaMin) {
            l = l + t;
        }
        t /= 2;
    }
    int j = i + l * direction;

    int deltaNode = safeLCP(i, j);
    int s = 0;
    t = l;
    while (t>1) {
        t = (t + 1) / 2;
        if (safeLCP(i, i + (s + t) * direction) > deltaNode) {
            s += t;
        }
    }
    int gamma = i + s*direction + min(direction,0);

    uint leftChild, rightChild;
    if (min(i,j)==gamma) {
        leftChild = uint(gamma);
    } else {
        leftChild = uint(gamma) + sim.initialNumBodies;
    }
    if (max(i,j)==gamma+1) {
        rightChild = uint(gamma+1);
    } else {
        rightChild = uint(gamma+1) + sim.initialNumBodies;
    }

    uint internalIdx = uint(i);// + sim.initialNumBodies;
    uint globalIdx = internalIdx + sim.initialNumBodies;
    internalNodes[internalIdx].childA = leftChild;
    internalNodes[internalIdx].childB = rightChild;
    internalNodes[internalIdx].readyChildren = 0u;
    internalNodes[internalIdx].comMass = vec4(0.0);
    internalNodes[internalIdx].aabb = packAABB(AABB(vec3(1e38), vec3(-1e38)));
    if (leftChild < sim.initialNumBodies) {
        leafNodes[leftChild].parentId = globalIdx;
    } else {
        internalNodes[leftChild-sim.initialNumBodies].parentId = globalIdx;
    }
    if (rightChild < sim.initialNumBodies) {
        leafNodes[rightChild].parentId = globalIdx;
    } else {
        internalNodes[rightChild-sim.initialNumBodies].parentId = globalIdx;
    }
    internalNodes[internalIdx].nodeDepth = uint(min(i, j));
    internalNodes[internalIdx].bodiesContained = uint(max(i, j) - min(i, j) + 1);
    if (i == 0) {
        internalNodes[internalIdx].parentId = 0xFFFFFFFFu;
    }
}

// #extension GL_ARB_shading_language_include : enable
// #include "bh_common.comp"
// Bottom-up reduction for COM and AABB

// Sets the proper values for the leaf nodes
// Enqueues internal nodes that have two leaves as children
void treeInitLeafNodesKernel()
{
    uint gid = gl_GlobalInvocationID.x;

    if (gid == 0) {
        sim.uintDebug[0]=0u;
        sim.uintDebug[50]=0u;
        tailIn = 0u;
        headIn = 0u;
        tailOut = 0u;
        headOut = 0u;
    }
    if (gid >= sim.numBodies) return;

    uint bodyIdx = indexIn[gid];
    Body body = srcB.bodies[bodyIdx];

    leafNodes[gid].comMass = vec4(body.posMass.xyz, body.posMass.w);
    leafNodes[gid].aabb = packAABB(AABB(body.posMass.xyz, body.posMass.xyz));
    leafNodes[gid].childA = 0xFFFFFFFFu;
    leafNodes[gid].childB = 0xFFFFFFFFu;
    leafNodes[gid].readyChildren = 0xFFFFFFFFu;
    leafNodes[gid].nodeDepth = 0u;

    uint parentIdx = leafNodes[gid].parentId;
    uint prev = atomicAdd(internalNodes[parentIdx-sim.initialNumBodies].readyChildren, 1u);
    if (prev == 1u) {
        uint idx = atomicAdd(tailIn, 1u);
        itemsIn[idx] = parentIdx;
    }
}
// Each pass of this kernel propagates COM and AABB one level up the tree
//TODO: make this work in one pass
void treePropagateNodesKernel()
{
    uint threadId = gl_GlobalInvocationID.x;
    uint totalThreads = gl_NumWorkGroups.x * gl_WorkGroupSize.x;

    if (gl_GlobalInvocationID.x == 0u) {
        if (internalNodes[0].readyChildren != 0xFFFFFFFFu) {
            //atomicAdd(sim.uintDebug[0], 1u);

        }
        sim.uintDebug[1] = 0u;
        headIn = 0u;
        headOut = 0u;
        tailOut = 0u;
    }

    memoryBarrierBuffer();
   
    uint workIdx = atomicAdd(headIn, 1u);
    while (workIdx < tailIn) {
        
        uint internalNodeIdx = itemsIn[workIdx]-sim.initialNumBodies;
        uint readyChildren = internalNodes[internalNodeIdx].readyChildren;
        if (readyChildren == 0xFFFFFFFFu) {
            workIdx = atomicAdd(headIn, 1u);
            continue;
        }

        uint leftReadyChildren = internalNodes[internalNodeIdx].childA < sim.initialNumBodies ? leafNodes[internalNodes[internalNodeIdx].childA].readyChildren 
                                                                                              : internalNodes[internalNodes[internalNodeIdx].childA-sim.initialNumBodies].readyChildren;
        uint rightReadyChildren = internalNodes[internalNodeIdx].childB < sim.initialNumBodies ? leafNodes[internalNodes[internalNodeIdx].childB].readyChildren 
                                                                                               : internalNodes[internalNodes[internalNodeIdx].childB-sim.initialNumBodies].readyChildren;
        if (leftReadyChildren < 2u || rightReadyChildren < 2u) {
            workIdx = atomicAdd(headIn, 1u);
            continue;

            
        }
        if (atomicCompSwap(internalNodes[internalNodeIdx].readyChildren, 2u, 0xFFFFFFFFu) != 2u) {
            workIdx = atomicAdd(headIn, 1u);
            continue;
        }
        Node leftChild = internalNodes[internalNodeIdx].childA < sim.initialNumBodies ? leafNodes[internalNodes[internalNodeIdx].childA] 
                                                                                       : internalNodes[internalNodes[internalNodeIdx].childA-sim.initialNumBodies];
        Node rightChild = internalNodes[internalNodeIdx].childB < sim.initialNumBodies ? leafNodes[internalNodes[internalNodeIdx].childB] 
                                                                                        : internalNodes[internalNodes[internalNodeIdx].childB-sim.initialNumBodies];
        
        vec4 leftCOM = leftChild.comMass;
        vec4 rightCOM = rightChild.comMass;
        float totalMass = leftCOM.w + rightCOM.w;
        vec3 centerOfMass;
        if (totalMass > 0.0) {
            centerOfMass = (leftCOM.w * leftCOM.xyz + rightCOM.w * rightCOM.xyz) / totalMass;
        } else {
            centerOfMass = (leftCOM.xyz + rightCOM.xyz) * 0.5;
        }
        AABB leftAABB = getAABB(leftChild.aabb);
        AABB rightAABB = getAABB(rightChild.aabb);
        AABB newAABB = updateAABB(leftAABB, rightAABB);
        internalNodes[internalNodeIdx].comMass = vec4(centerOfMass, totalMass);
        internalNodes[internalNodeIdx].aabb = packAABB(newAABB);
        internalNodes[internalNodeIdx].readyChildren = 0xFFFFFFFFu;
        internalNodes[internalNodeIdx].nodeDepth = 1u+max(leftChild.nodeDepth, rightChild.nodeDepth);
        uint parentIdx = internalNodes[internalNodeIdx].parentId;
        if (parentIdx != 0xFFFFFFFFu) {
            uint prev = atomicAdd(internalNodes[parentIdx-sim.initialNumBodies].readyChildren, 1u);
            if (prev == 1u) {
                uint idx = atomicAdd(tailOut, 1u);
                itemsOut[idx] = parentIdx;

            }
        }

        workIdx = atomicAdd(headIn, 1u);

        //atomicAdd(sim.uintDebug[1], 1u);
        
    }
}


