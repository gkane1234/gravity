//Alive - Dead partitioning kernels
//Sorts the morton codes of the alive bodies
//Dead bodies will be sorted to the end of the array
//Dispached with (numGroups,0,0) with workgroup size * numGroups = numBodies

shared uint hist[NUM_BUCKETS];
//Radix sort kernels
void radixHistogramKernel()
{
    uint gid = gl_GlobalInvocationID.x;
    uint lid = gl_LocalInvocationID.x;
    uint wgId = gl_WorkGroupID.x;

    //reset the histogram for this workgroup

    if (lid < NUM_BUCKETS) hist[lid] = 0u; 

    barrier();

    bool inRange = gid < sim.numBodies;

    if (inRange) {
        uint64_t key = mortonIn[gid];
        uint digit = uint((key >> passShift) & (NUM_BUCKETS - 1u));
        atomicAdd(hist[digit], 1u);
    }
    
    barrier();
    //publish the histogram for this workgroup
    if (lid < NUM_BUCKETS) {
        wgHist[wgId * NUM_BUCKETS + lid] = hist[lid];
    }
}
//Dispached with (ceil(NUM_RADIX_BUCKETS*NUM_WORK_GROUPS/WORK_GROUP_SIZE),0,0) with NUM_RADIX_BUCKETS = 2^RADIX_BITS where RADIX_BITS=4
//Histogram is of size NUM_RADIX_BUCKETS * NUM_WORK_GROUPS
//Want to dispach that many threads to do inclusive sum
shared uint threadSums[WG_SIZE];
void radixParallelScanKernel()
{

    uint lid = gl_LocalInvocationID.x;
    uint wgid = gl_WorkGroupID.x;
    uint regionSize = (numWorkGroups + WG_SIZE -1 ) / WG_SIZE;

    uint regionStart = lid*regionSize;
    uint bucket = wgid;


    threadSums[lid]=0;


    //inclusive sum of contiguous regions of size ceil(numworkgroups/wgsize)
    uint regionSum = 0u;   
    for (uint i=0; i<regionSize; i++) {
        uint nextIndex = bucket+NUM_BUCKETS*(regionStart+i);
        regionSum+= (nextIndex<NUM_BUCKETS*numWorkGroups) ? wgHist[nextIndex] : 0u;
    }
    threadSums[lid]=regionSum;
    barrier();


    //Kogge-Stone inclusive sum of the threadSums

    for (uint offset = 1u; offset < WG_SIZE; offset <<= 1u) {
        uint add = (lid >= offset) ? threadSums[lid-offset] : 0u;
        barrier();
        threadSums[lid]+=add;
        barrier();
    }

    uint base = threadSums[lid]-regionSum;

    //Propagate the threadSums to each region and repeat inclusive contiguous sum
    uint runningTotal = base;
    for (uint i=0; i<regionSize; i++) {
        uint nextIndex = bucket+NUM_BUCKETS*(regionStart+i);
        if (nextIndex < NUM_BUCKETS*numWorkGroups) {
            wgScanned[nextIndex] = runningTotal;
            runningTotal+=wgHist[nextIndex];
        }
    }

    if (lid == WG_SIZE-1) {
        bucketTotals[bucket] = threadSums[WG_SIZE-1u];
    }
}
//Dispached with (1,0,0)
shared uint temp[WG_SIZE];
void radixExclusiveScanKernel()
{ 
    //load the bucket total for each bucket
    uint lid = gl_LocalInvocationID.x;
    uint val = (lid < NUM_BUCKETS) ? bucketTotals[lid] : 0u;
    temp[lid] = val;
    barrier();
 
    //add bucket totals to find the global base using the Kogge-Stone inclusive sum algorithm
    //adds the one the came before it, then the one two before it, then 4 before it, etc.
    //done in parallel with the other threads to get inclusive sum
    for (uint offset = 1u; offset < WG_SIZE; offset <<= 1u) {
        uint add = 0u;
        if (lid>=offset) add = temp[lid-offset];
        barrier();
        temp[lid]+=add;
        barrier();
    }

    //calculate the exclusive sum for this bucket
    uint exclusive = temp[lid]-val;

    //publish the global base for this bucket
    if (lid < NUM_BUCKETS) {
        globalBase[lid] = exclusive;
    }

}

//Dispached with (numGroups,0,0) with workgroup size * numGroups = numBodies
shared uint digits[WG_SIZE];
void radixScatterKernel()
{
    uint gid = gl_GlobalInvocationID.x;
    uint lid = gl_LocalInvocationID.x;
    uint wgId = gl_WorkGroupID.x;
    //check if body exists
    bool isActive = (gid < sim.numBodies);

    if (!isActive) {
        digits[lid] = 0xFFFFFFFFu;
        //barrier();
        return;
    }
    //get the morton code for the body

    uint64_t key = isActive ? mortonIn[gid] : 0ul;
    //get the digits for the body
    uint dig = uint((key >> passShift) & (NUM_BUCKETS - 1u));
    //set the digits
    digits[lid] = isActive ? dig : 0xFFFFFFFFu;
    barrier();

    //calculate the local rank for this body (how many repeats before)
    uint localRank = 0u;
    for (uint i = 0u; i < lid; ++i) {
        if (digits[i] == dig) localRank++;
    }
    //place the body in the correct position

    uint base = globalBase[dig] + wgScanned[wgId * NUM_BUCKETS + dig];
    uint dstIndex = base + localRank;
    mortonOut[dstIndex] = key;
    indexOut[dstIndex]  = indexIn[gid];

}



